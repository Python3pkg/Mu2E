Timer unit: 1e-06 s

Total time: 2.01182 s
File: /Users/brianpollack/Documents/Mu2E/tools/fit_funcs.py
Function: brzphi_3d_fast at line 107

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   107                                             def brzphi_3d_fast(z,r,phi,R,ns,ms,offset,**AB_params):
   108                                               """ 3D model for Bz Br and Bphi vs Z and R. Can take any number of AnBn terms."""
   109                                           
   110         1            2      2.0      0.0      model_r = 0.0
   111         1            1      1.0      0.0      model_z = 0.0
   112         1            1      1.0      0.0      model_phi = 0.0
   113         1            1      1.0      0.0      R = R
   114         1          623    623.0      0.0      ABs = sorted({k:v for (k,v) in AB_params.iteritems() if 'delta' not in k},key=lambda x:','.join((x.split('_')[1].zfill(5),x.split('_')[2].zfill(5),x.split('_')[0])))
   115         1           43     43.0      0.0      Ds = sorted({k:v for (k,v) in AB_params.iteritems() if 'delta' in k})
   116         5            6      1.2      0.0      for n in range(ns):
   117       124          469      3.8      0.0        for i,ab in enumerate(pairwise(ABs[n*ms*2:(n+1)*ms*2])):
   118                                           
   119                                                   #model_r += np.cos(n*phi)*ivp[n][i]*kms[n][i]*(AB_params[ab[0]]*np.cos(kms[n][i]*(z-offset)) + AB_params[ab[1]]*np.sin(-kms[n][i]*(z-offset)))
   120                                                   #model_z += -np.cos(n*phi)*iv[n][i]*kms[n][i]*(AB_params[ab[0]]*np.sin(kms[n][i]*(z-offset)) + AB_params[ab[1]]*np.cos(-kms[n][i]*(z-offset)))
   121                                                   #model_phi += -n*np.sin(n*phi)*(1/abs(r))*iv[n][i]*(AB_params[ab[0]]*np.cos(kms[n][i]*(z-offset)) + AB_params[ab[1]]*np.sin(-kms[n][i]*(z-offset)))
   122                                           
   123                                           ######version cos(n*phi+delta)
   124                                                   #model_r += np.cos(n*phi+delta)*ivp[n][i]*kms[n][i]*(AB_params[ab[0]]*np.cos(kms[n][i]*(z-offset)) + AB_params[ab[1]]*np.sin(-kms[n][i]*(z-offset)))
   125                                                   #model_z += -np.cos(n*phi+delta)*iv[n][i]*kms[n][i]*(AB_params[ab[0]]*np.sin(kms[n][i]*(z-offset)) + AB_params[ab[1]]*np.cos(-kms[n][i]*(z-offset)))
   126                                                   #model_phi += -n*np.sin(n*phi+delta)*(1/abs(r))*iv[n][i]*(AB_params[ab[0]]*np.cos(kms[n][i]*(z-offset)) + AB_params[ab[1]]*np.sin(-kms[n][i]*(z-offset)))
   127                                           
   128                                           ######version cos(n*phi)cos(delta)-sin(n*phi)sin(delta)
   129                                                   #model_r += (np.cos(n*phi)*np.cos(delta)-np.sin(n*phi)*np.sin(delta))*ivp[n][i]*kms[n][i]*(AB_params[ab[0]]*np.cos(kms[n][i]*(z-offset)) + AB_params[ab[1]]*np.sin(-kms[n][i]*(z-offset)))
   130                                                   #model_z += -(np.cos(n*phi)*np.cos(delta)-np.sin(n*phi)*np.sin(delta))*iv[n][i]*kms[n][i]*(AB_params[ab[0]]*np.sin(kms[n][i]*(z-offset)) + AB_params[ab[1]]*np.cos(-kms[n][i]*(z-offset)))
   131                                                   #model_phi += -n*(np.sin(n*phi)*np.cos(delta)+np.cos(n*phi)*np.sin(delta))*(1/abs(r))*iv[n][i]*(AB_params[ab[0]]*np.cos(kms[n][i]*(z-offset)) + AB_params[ab[1]]*np.sin(-kms[n][i]*(z-offset)))
   132                                           
   133                                           ######version cos(n*phi)cos(delta)-sin(n*phi)sin(delta)
   134                                                   #model_r += (np.cos(n*phi)*np.cos(AB_params[Ds[n]])-np.sin(n*phi)*np.sin(AB_params[Ds[n]]))*ivp[n][i]*kms[n][i]*(AB_params[ab[0]]*np.cos(kms[n][i]*z) + AB_params[ab[1]]*np.sin(-kms[n][i]*z))
   135       120       679237   5660.3     33.8          model_r += (np.cos(phi)*np.cos(AB_params[Ds[n]])-np.sin(phi)*np.sin(AB_params[Ds[n]]))*ivp[n][i]*kms[n][i]*(AB_params[ab[0]]*np.cos(z) + AB_params[ab[1]]*np.sin(z))
   136                                                   #model_r += model_r_calc(z,phi,n,AB_params[Ds[n]],AB_params[ab[0]],AB_params[ab[1]],kms[n][i],ivp[n][i])
   137       120       647711   5397.6     32.2          model_z += -(np.cos(n*phi)*np.cos(AB_params[Ds[n]])-np.sin(n*phi)*np.sin(AB_params[Ds[n]]))*iv[n][i]*kms[n][i]*(AB_params[ab[0]]*np.sin(kms[n][i]*z) + AB_params[ab[1]]*np.cos(-kms[n][i]*z))
   138       120       683167   5693.1     34.0          model_phi += -n*(np.sin(n*phi)*np.cos(AB_params[Ds[n]])+np.cos(n*phi)*np.sin(AB_params[Ds[n]]))*(1/abs(r))*iv[n][i]*(AB_params[ab[0]]*np.cos(kms[n][i]*z) + AB_params[ab[1]]*np.sin(-kms[n][i]*z))
   139                                           
   140                                           ######version cos(n*phi)cos(delta)-sin(n*phi)sin(delta), small angle for delta
   141                                                   #model_r += (np.cos(n*phi)*(1-delta**2/2)-np.sin(n*phi)*delta)*ivp[n][i]*kms[n][i]*(AB_params[ab[0]]*np.cos(kms[n][i]*(z-offset)) + AB_params[ab[1]]*np.sin(-kms[n][i]*(z-offset)))
   142                                                   #model_z += -(np.cos(n*phi)*(1-delta**2/2)-np.sin(n*phi)*delta)*iv[n][i]*kms[n][i]*(AB_params[ab[0]]*np.sin(kms[n][i]*(z-offset)) + AB_params[ab[1]]*np.cos(-kms[n][i]*(z-offset)))
   143                                                   #model_phi += -n*(np.sin(n*phi)*(1-delta**2/2)+np.cos(n*phi)*delta)*(1/abs(r))*iv[n][i]*(AB_params[ab[0]]*np.cos(kms[n][i]*(z-offset)) + AB_params[ab[1]]*np.sin(-kms[n][i]*(z-offset)))
   144                                           
   145                                           ######version cos(n*phi)cos(delta)-sin(n*phi)sin(delta), small angle for delta
   146                                                   #model_r += (np.cos(n*phi)*(1-AB_params[Ds[n]]**2)-np.sin(n*phi)*(AB_params[Ds[n]]))*ivp[n][i]*kms[n][i]*(AB_params[ab[0]]*np.cos(kms[n][i]*z) + AB_params[ab[1]]*np.sin(-kms[n][i]*z))
   147                                                   #model_z += -(np.cos(n*phi)*(1-AB_params[Ds[n]]**2)-np.sin(n*phi)*(AB_params[Ds[n]]))*iv[n][i]*kms[n][i]*(AB_params[ab[0]]*np.sin(kms[n][i]*z) + AB_params[ab[1]]*np.cos(-kms[n][i]*z))
   148                                                   #model_phi += -n*(np.sin(n*phi)*(1-AB_params[Ds[n]]**2)+np.cos(n*phi)*(AB_params[Ds[n]]))*(1/abs(r))*iv[n][i]*(AB_params[ab[0]]*np.cos(kms[n][i]*z) + AB_params[ab[1]]*np.sin(-kms[n][i]*z))
   149                                           
   150                                           ######version cos(n*phi)cos(delta)-sin(n*phi)sin(delta), small angle for delta, drop sin(delta)
   151                                                   #model_r += np.cos(n*phi)*(1-delta**2/2)*ivp[n][i]*kms[n][i]*(AB_params[ab[0]]*np.cos(kms[n][i]*(z-offset)) + AB_params[ab[1]]*np.sin(-kms[n][i]*(z-offset)))
   152                                                   #model_z += -np.cos(n*phi)*(1-delta**2/2)*iv[n][i]*kms[n][i]*(AB_params[ab[0]]*np.sin(kms[n][i]*(z-offset)) + AB_params[ab[1]]*np.cos(-kms[n][i]*(z-offset)))
   153                                                   #model_phi += -n*np.sin(n*phi)*(1-delta**2/2)*(1/abs(r))*iv[n][i]*(AB_params[ab[0]]*np.cos(kms[n][i]*(z-offset)) + AB_params[ab[1]]*np.sin(-kms[n][i]*(z-offset)))
   154                                           
   155                                           ######version cos(n*phi+delta)+sin(n*phi+delta)
   156                                                   #model_r += (np.cos(n*phi+delta)+np.sin(n*phi+delta))*ivp[n][i]*kms[n][i]*(AB_params[ab[0]]*np.cos(kms[n][i]*(z-offset)) + AB_params[ab[1]]*np.sin(-kms[n][i]*(z-offset)))
   157                                                   #model_z += -(np.cos(n*phi+delta)+np.sin(n*phi+delta))*iv[n][i]*kms[n][i]*(AB_params[ab[0]]*np.sin(kms[n][i]*(z-offset)) + AB_params[ab[1]]*np.cos(-kms[n][i]*(z-offset)))
   158                                                   #model_phi += n*(-np.sin(n*phi+delta)+np.cos(n*phi+delta))*(1/abs(r))*iv[n][i]*(AB_params[ab[0]]*np.cos(kms[n][i]*(z-offset)) + AB_params[ab[1]]*np.sin(-kms[n][i]*(z-offset)))
   159                                           
   160         1          263    263.0      0.0      model_phi[np.isinf(model_phi)]=0
   161                                               #m = mr(n_args,i_args,a_args,b_args)
   162                                               #model_r = np.sum(mr(n_args,i_args,a_args,b_args),dtype=np.ndarray)
   163                                               #model_r = np.add.reduce(m)
   164                                               #model_r = np.sum(mr(n_args,i_args,a_args,b_args),dtype=np.ndarray)
   165         1           31     31.0      0.0      print model_r.shape, model_z.shape
   166         1          263    263.0      0.0      return np.concatenate([model_r,model_z,model_phi]).ravel()